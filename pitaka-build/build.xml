<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project default="build pitaka" name="build the Pitaka project">

	<property name="project.dir" location="${basedir}/../" />
	<property name="xmldb.project.dir" location="${project.dir}/pitaka-db" />
	<property name="server.project.dir" location="${project.dir}/pitaka-server" />
	<property name="dict.project.dir" location="${project.dir}/pitaka-dict" />
	<property name="core.project.dir" location="${project.dir}/pitaka-core" />

	<property name="servlet.classes" value="zen/ilgo/pitaka/servlet/" />

	<property name="workspace.dir" location="/home/ilgo/workspace" />
	<property name="pitaka.install.dir" location="${workspace.dir}/pitaka" />
	<property name="exist.home" location="${pitaka.install.dir}/db" />
	<property name="webapp.classes.dir" location="${pitaka.install.dir}/webapps/pitaka/WEB-INF/classes/zen/ilgo/pitaka/servlet" />

	<target name="build pitaka">
		<antcall target="clean" />
		<antcall target="build-server" />
		<antcall target="build-xmldb" />
		<antcall target="build-dict" />
		<antcall target="build-core" />
		<antcall target="move-jars" />

		<!--<antcall target="test" />-->
	</target>

	<target name="clean">
		<!-- clean out the root dir, then create basic structure -->
		<delete dir="${workspace.dir}/repository" />
		<delete dir="${pitaka.install.dir}/webapps" />
		<delete dir="${pitaka.install.dir}/db" />
		<delete dir="${pitaka.install.dir}/derby" />
		<mkdir dir="${pitaka.install.dir}/db/logs" />
		<mkdir dir="${webapp.classes.dir}" />
	</target>

	<target name="build-server">
		<!-- copy webapp structure and servlet classe, then 'war' it -->
		<copy todir="${pitaka.install.dir}/webapps">
			<fileset dir="${server.project.dir}/webapps" />
		</copy>
		<copy todir="${webapp.classes.dir}">
			<fileset dir="${server.project.dir}/bin/zen/ilgo/pitaka/servlet" />
		</copy>
		<jar destfile="${pitaka.install.dir}/webapps/pitaka.war" basedir="${pitaka.install.dir}/webapps/pitaka" />
		<delete dir="${pitaka.install.dir}/webapps/pitaka" />

		<ant antfile="${server.project.dir}/build-server.xml" dir="${server.project.dir}" target="build.update.jar" />
		<delete dir="${server.project.dir}/@dot" />
		<delete file="${server.project.dir}/@dot.log" />
	</target>

	<target name="build-xmldb">
		<!-- creates the conf.xml with proper xml attributes for exist.home -->
		<java classname="zen.ilgo.pitaka.build.BuildXmldbStuff">
			<sysproperty key="exist.home" value="${exist.home}" />
			<sysproperty key="xmldb.project.dir" value="${xmldb.project.dir}" />
			<classpath>
				<pathelement location="bin" />
				<fileset dir="${xmldb.project.dir}/libs">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>

		<!-- the data.tar.bz2 file is generated from Pitaka -create code -->
		<copy file="${basedir}/resources/data.tar.bz2" todir="${exist.home}" />
		<bunzip2 src="${exist.home}/data.tar.bz2" />
		<untar src="${exist.home}/data.tar" dest="${exist.home}" />
		<delete file="${exist.home}/data.tar" />
		<delete file="${exist.home}/data.tar.bz2" />

		<ant antfile="${xmldb.project.dir}/build-xmldb.xml" dir="${xmldb.project.dir}" target="build.update.jar" />
		<delete dir="${xmldb.project.dir}/@dot" />
		<delete file="${xmldb.project.dir}/@dot.log" />
	</target>

	<target name="build-dict">
		<!-- creates the derby DB : dicts -->
		<java classname="zen.ilgo.pitaka.build.BuildDictStuff">
			<sysproperty key="derby.dbname" value="${pitaka.install.dir}/derby/dicts" />
			<sysproperty key="dict.project.dir" value="${dict.project.dir}" />
			<classpath>
				<pathelement location="bin" />
				<fileset dir="${dict.project.dir}/libs">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
		<ant antfile="${dict.project.dir}/build-dict.xml" dir="${dict.project.dir}" target="build.update.jar" />
		<delete dir="${dict.project.dir}/@dot" />
		<delete file="${dict.project.dir}/@dot.log" />
	</target>

	<target name="build-core">
		<ant antfile="${core.project.dir}/build-core.xml" dir="${core.project.dir}" target="build.update.jar" />
		<delete dir="${core.project.dir}/@dot" />
		<delete file="${core.project.dir}/@dot.log" />
	</target>

	<target name="move-jars">
		<move file="${server.project.dir}/zen.ilgo.pitaka.server_1.0.0.jar" todir="${pitaka.install.dir}/plugins" overwrite="true" failonerror="false"/>
		<move file="${xmldb.project.dir}/zen.ilgo.pitaka.db_1.0.0.jar" todir="${pitaka.install.dir}/plugins" overwrite="true" failonerror="false"/>
		<move file="${dict.project.dir}/zen.ilgo.pitaka.dict_1.0.0.jar" todir="${pitaka.install.dir}/plugins" overwrite="true" failonerror="false"/>
		<move file="${core.project.dir}/zen.ilgo.pitaka.core_1.0.0.jar" todir="${pitaka.install.dir}/plugins" overwrite="true" failonerror="false"/>
	</target>

	<target name="test">
		<junit haltonfailure="no">
			<classpath>
				<pathelement location="${basedir}/bin" />
				<pathelement location="${dict.project.dir}/bin" />
				<pathelement path="${dict.project.dir}/libs/derby.jar" />
				<pathelement path="/usr/share/java/junit4.jar" />				
			</classpath>
			<formatter type="plain" />
			<test name="zen.ilgo.pitaka.test.DictTest" />
			<test name="zen.ilgo.pitaka.test.DictManagementTest" />
		</junit>
	</target>

</project>
